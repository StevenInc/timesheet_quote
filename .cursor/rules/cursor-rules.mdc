---
description: "general rules for Cursor to follow"
globs:
alwaysApply: true
---

Stay focused on one task at a time. I want you to ask to proceed when you add additional features.
Respond to each task with the steps to complete the task, but do not execute the step until I approve them. I want to have the ability to edit the steps before proceeding.

Ask to run npm run build instead of npm run dev after code has been modified.

For Reference here is my current database schema:
-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.client_comments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  quote_id uuid NOT NULL,
  quote_revision_id uuid,
  comment text NOT NULL,
  comment_date timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT client_comments_pkey PRIMARY KEY (id),
  CONSTRAINT client_comments_quote_id_fkey FOREIGN KEY (quote_id) REFERENCES public.quotes(id),
  CONSTRAINT client_comments_quote_revision_id_fkey FOREIGN KEY (quote_revision_id) REFERENCES public.quote_revisions(id)
);
CREATE TABLE public.clients (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name character varying NOT NULL,
  email character varying NOT NULL,
  phone character varying,
  address text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT clients_pkey PRIMARY KEY (id)
);
CREATE TABLE public.default_legal_terms (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  owner_id uuid NOT NULL UNIQUE,
  terms text NOT NULL DEFAULT ''::text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT default_legal_terms_pkey PRIMARY KEY (id),
  CONSTRAINT default_legal_terms_owner_id_fkey FOREIGN KEY (owner_id) REFERENCES auth.users(id)
);
CREATE TABLE public.emails (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  to_email text NOT NULL,
  subject text NOT NULL,
  html text NOT NULL,
  status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'sent'::text, 'failed'::text])),
  metadata jsonb,
  created_at timestamp with time zone DEFAULT now(),
  sent_at timestamp with time zone,
  error_message text,
  CONSTRAINT emails_pkey PRIMARY KEY (id)
);
CREATE TABLE public.legal_terms (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  quote_revision_id uuid NOT NULL,
  terms text NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT legal_terms_pkey PRIMARY KEY (id),
  CONSTRAINT legal_terms_quote_revision_id_fkey FOREIGN KEY (quote_revision_id) REFERENCES public.quote_revisions(id)
);
CREATE TABLE public.payment_schedule (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  quote_id uuid NOT NULL,
  sequence smallint NOT NULL,
  percentage numeric NOT NULL,
  description text NOT NULL,
  CONSTRAINT payment_schedule_pkey PRIMARY KEY (id)
);
CREATE TABLE public.payment_terms (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  quote_revision_id uuid NOT NULL,
  percentage numeric NOT NULL,
  description text NOT NULL,
  sort_order integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT payment_terms_pkey PRIMARY KEY (id),
  CONSTRAINT payment_terms_quote_revision_id_fkey FOREIGN KEY (quote_revision_id) REFERENCES public.quote_revisions(id)
);
CREATE TABLE public.quote_items (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  quote_revision_id uuid NOT NULL,
  description text NOT NULL,
  quantity numeric NOT NULL DEFAULT 1,
  unit_price numeric NOT NULL DEFAULT 0,
  total numeric NOT NULL DEFAULT 0,
  sort_order integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT quote_items_pkey PRIMARY KEY (id),
  CONSTRAINT quote_items_quote_revision_id_fkey FOREIGN KEY (quote_revision_id) REFERENCES public.quote_revisions(id)
);
CREATE TABLE public.quote_revisions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  quote_id uuid NOT NULL,
  revision_number integer NOT NULL,
  expires_on date,
  notes text,
  tax_rate numeric DEFAULT 0.08,
  is_tax_enabled boolean DEFAULT false,
  is_recurring boolean DEFAULT false,
  billing_period USER-DEFINED,
  recurring_amount numeric,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  archived boolean DEFAULT false,
  status USER-DEFINED DEFAULT 'DRAFT'::quote_status,
  title character varying,
  sent_via_email boolean DEFAULT false,
  sent_at timestamp with time zone,
  viewed_at timestamp with time zone,
  CONSTRAINT quote_revisions_pkey PRIMARY KEY (id),
  CONSTRAINT quote_revisions_quote_id_fkey FOREIGN KEY (quote_id) REFERENCES public.quotes(id)
);
CREATE TABLE public.quote_status_history (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  quote_id uuid NOT NULL,
  status USER-DEFINED NOT NULL,
  changed_by uuid,
  changed_at timestamp with time zone DEFAULT now(),
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT quote_status_history_pkey PRIMARY KEY (id),
  CONSTRAINT quote_status_history_quote_id_fkey FOREIGN KEY (quote_id) REFERENCES public.quotes(id)
);
CREATE TABLE public.quotes (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  quote_number character varying NOT NULL UNIQUE,
  owner_id uuid NOT NULL,
  client_id uuid NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  current_status USER-DEFINED DEFAULT 'DRAFT'::base_quote_status,
  archived boolean DEFAULT false,
  status USER-DEFINED DEFAULT 'DRAFT'::quote_status,
  CONSTRAINT quotes_pkey PRIMARY KEY (id),
  CONSTRAINT quotes_client_id_fkey FOREIGN KEY (client_id) REFERENCES public.clients(id)
);
CREATE TABLE public.recurring_payments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  quote_id uuid NOT NULL,
  payment_schedule_id uuid NOT NULL,
  cycle_number integer NOT NULL,
  due_date date NOT NULL,
  amount numeric NOT NULL,
  status text NOT NULL DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'paid'::text, 'overdue'::text, 'cancelled'::text])),
  paid_date date,
  paid_amount numeric,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT recurring_payments_pkey PRIMARY KEY (id),
  CONSTRAINT recurring_payments_payment_schedule_id_fkey FOREIGN KEY (payment_schedule_id) REFERENCES public.payment_schedule(id)
);